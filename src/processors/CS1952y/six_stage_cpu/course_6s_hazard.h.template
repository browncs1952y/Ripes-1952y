#pragma once

#include "../../RISC-V/riscv.h"
#include "VSRTL/core/vsrtl_component.h"
#include <iostream>

namespace vsrtl {
namespace core {
using namespace Ripes;

template <unsigned XLEN>
class Course6SHazard : public Component {
public:
Course6SHazard(std::string name, SimComponent *parent) : Component(name, parent) {        
    ifid_clear << [=] {
        return 0;
    };
    
    idrr_clear << [=] {
        return 0;
    };
    
    rrex_clear << [=] {
        return 0;
    };
    
    exmem_clear << [=] {
        return 0;
    };
    
    if_enable << [=] {
        return 1;
    };
    
    idrr_enable << [=] {
        return 1;
    };
    
    rrex_enable << [=] {
        return 1;
    };
  }
  
  INPUTPORT(id_rs1_id, 5);
  INPUTPORT(id_rs2_id, 5);
  
  INPUTPORT(rr_rs1_id, 5);
  INPUTPORT(rr_rs2_id, 5);
  INPUTPORT_ENUM(rs1_sel, ALU1Sel);
  INPUTPORT_ENUM(rs2_sel, ALU2Sel);
  
  INPUTPORT(rrex_rd_id, 5);
  
  INPUTPORT_ENUM(idex_mem_op, MemOp);
  
  INPUTPORT(jump_or_branch, 1);
  
  OUTPUTPORT(ifid_clear, 1);
  OUTPUTPORT(idrr_clear, 1);
  OUTPUTPORT(rrex_clear, 1);
  OUTPUTPORT(exmem_clear, 1);
  OUTPUTPORT(if_enable, 1);
  OUTPUTPORT(idrr_enable, 1);
  OUTPUTPORT(rrex_enable, 1);
};

} // namespace core
} // namespace vsrtl
